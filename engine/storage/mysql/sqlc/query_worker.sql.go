// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query_worker.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getIDCommandDetailsByProcessID = `-- name: GetIDCommandDetailsByProcessID :many
SELECT
  step_id,
  enrollment_id,
  command_uuid,
  request_type,
  completed,
  result
FROM
  id_commands c
  JOIN steps s
    ON c.step_id = s.id
WHERE
  s.process_id = ?
ORDER BY
  step_id, enrollment_id
`

type GetIDCommandDetailsByProcessIDRow struct {
	StepID       int64
	EnrollmentID string
	CommandUuid  string
	RequestType  string
	Completed    bool
	Result       []byte
}

func (q *Queries) GetIDCommandDetailsByProcessID(ctx context.Context, processID sql.NullString) ([]GetIDCommandDetailsByProcessIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getIDCommandDetailsByProcessID, processID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIDCommandDetailsByProcessIDRow
	for rows.Next() {
		var i GetIDCommandDetailsByProcessIDRow
		if err := rows.Scan(
			&i.StepID,
			&i.EnrollmentID,
			&i.CommandUuid,
			&i.RequestType,
			&i.Completed,
			&i.Result,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIDCommandIDsByProcessID = `-- name: GetIDCommandIDsByProcessID :many
SELECT
  step_id,
  enrollment_id
FROM
  id_commands c
  JOIN steps s
    ON c.step_id = s.id
WHERE
  s.process_id = ?
`

type GetIDCommandIDsByProcessIDRow struct {
	StepID       int64
	EnrollmentID string
}

func (q *Queries) GetIDCommandIDsByProcessID(ctx context.Context, processID sql.NullString) ([]GetIDCommandIDsByProcessIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getIDCommandIDsByProcessID, processID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIDCommandIDsByProcessIDRow
	for rows.Next() {
		var i GetIDCommandIDsByProcessIDRow
		if err := rows.Scan(&i.StepID, &i.EnrollmentID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRePushIDs = `-- name: GetRePushIDs :many
SELECT DISTINCT
  enrollment_id
FROM
  id_commands
WHERE
  last_push IS NOT NULL AND
  last_push < ?
`

func (q *Queries) GetRePushIDs(ctx context.Context, before sql.NullTime) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRePushIDs, before)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var enrollment_id string
		if err := rows.Scan(&enrollment_id); err != nil {
			return nil, err
		}
		items = append(items, enrollment_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStepCommandsByProcessID = `-- name: GetStepCommandsByProcessID :many
SELECT
  sc.step_id,
  sc.command_uuid,
  sc.request_type,
  sc.command
FROM
  step_commands sc
  JOIN steps s
    ON sc.step_id = s.id
WHERE
  s.process_id = ?
`

type GetStepCommandsByProcessIDRow struct {
	StepID      int64
	CommandUuid string
	RequestType string
	Command     []byte
}

func (q *Queries) GetStepCommandsByProcessID(ctx context.Context, processID sql.NullString) ([]GetStepCommandsByProcessIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStepCommandsByProcessID, processID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStepCommandsByProcessIDRow
	for rows.Next() {
		var i GetStepCommandsByProcessIDRow
		if err := rows.Scan(
			&i.StepID,
			&i.CommandUuid,
			&i.RequestType,
			&i.Command,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStepsByProcessID = `-- name: GetStepsByProcessID :many
SELECT
  id,
  workflow_name,
  instance_id,
  step_name
FROM
  steps
WHERE
  process_id = ?
`

type GetStepsByProcessIDRow struct {
	ID           int64
	WorkflowName string
	InstanceID   string
	StepName     sql.NullString
}

func (q *Queries) GetStepsByProcessID(ctx context.Context, processID sql.NullString) ([]GetStepsByProcessIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStepsByProcessID, processID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStepsByProcessIDRow
	for rows.Next() {
		var i GetStepsByProcessIDRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowName,
			&i.InstanceID,
			&i.StepName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStepsWithContextByProcessID = `-- name: GetStepsWithContextByProcessID :many
SELECT
  id,
  workflow_name,
  instance_id,
  step_name,
  context
FROM
  steps
WHERE
  process_id = ?
`

type GetStepsWithContextByProcessIDRow struct {
	ID           int64
	WorkflowName string
	InstanceID   string
	StepName     sql.NullString
	Context      []byte
}

func (q *Queries) GetStepsWithContextByProcessID(ctx context.Context, processID sql.NullString) ([]GetStepsWithContextByProcessIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getStepsWithContextByProcessID, processID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStepsWithContextByProcessIDRow
	for rows.Next() {
		var i GetStepsWithContextByProcessIDRow
		if err := rows.Scan(
			&i.ID,
			&i.WorkflowName,
			&i.InstanceID,
			&i.StepName,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeIDCommandsByProcessID = `-- name: RemoveIDCommandsByProcessID :exec
DELETE sc FROM
  id_commands sc
  JOIN steps s
    ON sc.step_id = s.id
WHERE
  s.process_id = ?
`

func (q *Queries) RemoveIDCommandsByProcessID(ctx context.Context, processID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, removeIDCommandsByProcessID, processID)
	return err
}

const removeStepCommandsByProcessID = `-- name: RemoveStepCommandsByProcessID :exec
DELETE sc FROM
  step_commands sc
  JOIN steps s
    ON sc.step_id = s.id
WHERE
  s.process_id = ?
`

func (q *Queries) RemoveStepCommandsByProcessID(ctx context.Context, processID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, removeStepCommandsByProcessID, processID)
	return err
}

const removeStepsByProcessID = `-- name: RemoveStepsByProcessID :exec
DELETE FROM
  steps
WHERE
  process_id = ?
`

func (q *Queries) RemoveStepsByProcessID(ctx context.Context, processID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, removeStepsByProcessID, processID)
	return err
}

const updateLastPushByProcessID = `-- name: UpdateLastPushByProcessID :exec
UPDATE
  id_commands c
  JOIN steps s
    ON c.step_id = s.id
SET
  c.last_push = CURRENT_TIMESTAMP
WHERE
  s.process_id = ?
`

func (q *Queries) UpdateLastPushByProcessID(ctx context.Context, processID sql.NullString) error {
	_, err := q.db.ExecContext(ctx, updateLastPushByProcessID, processID)
	return err
}

const updateRePushIDs = `-- name: UpdateRePushIDs :exec
UPDATE
  id_commands
SET
  last_push = ?
WHERE
  last_push IS NOT NULL AND
  last_push < ?
`

type UpdateRePushIDsParams struct {
	LastPush sql.NullTime
	Before   sql.NullTime
}

func (q *Queries) UpdateRePushIDs(ctx context.Context, arg UpdateRePushIDsParams) error {
	_, err := q.db.ExecContext(ctx, updateRePushIDs, arg.LastPush, arg.Before)
	return err
}

const updateStepAfterNotUntil = `-- name: UpdateStepAfterNotUntil :exec
UPDATE
  steps
SET
  process_id = ?
WHERE
  process_id IS NULL AND
  not_until < ?
`

type UpdateStepAfterNotUntilParams struct {
	ProcessID sql.NullString
	NotUntil  sql.NullTime
}

func (q *Queries) UpdateStepAfterNotUntil(ctx context.Context, arg UpdateStepAfterNotUntilParams) error {
	_, err := q.db.ExecContext(ctx, updateStepAfterNotUntil, arg.ProcessID, arg.NotUntil)
	return err
}

const updateStepAfterTimeout = `-- name: UpdateStepAfterTimeout :exec
UPDATE
  steps
SET
  process_id = ?
WHERE
  process_id IS NULL AND
  timeout <= ?
`

type UpdateStepAfterTimeoutParams struct {
	ProcessID sql.NullString
	Timeout   sql.NullTime
}

func (q *Queries) UpdateStepAfterTimeout(ctx context.Context, arg UpdateStepAfterTimeoutParams) error {
	_, err := q.db.ExecContext(ctx, updateStepAfterTimeout, arg.ProcessID, arg.Timeout)
	return err
}
