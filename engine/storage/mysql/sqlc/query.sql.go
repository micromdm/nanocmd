// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"strings"
)

const clearWorkflowStatus = `-- name: ClearWorkflowStatus :exec
DELETE FROM
  wf_status
WHERE
  enrollment_id = ?
`

func (q *Queries) ClearWorkflowStatus(ctx context.Context, enrollmentID string) error {
	_, err := q.db.ExecContext(ctx, clearWorkflowStatus, enrollmentID)
	return err
}

const countOutstandingIDWorkflowStepCommands = `-- name: CountOutstandingIDWorkflowStepCommands :one
SELECT
  COUNT(*),
  c1.step_id
FROM
  id_commands c1
  JOIN id_commands c2
    ON c1.step_id = c2.step_id
WHERE
  c1.enrollment_id = ? AND
  c1.completed = 0 AND
  c2.enrollment_id = c1.enrollment_id AND
  c2.command_uuid = ?
GROUP BY
  c1.step_id
LIMIT 1
`

type CountOutstandingIDWorkflowStepCommandsParams struct {
	EnrollmentID string
	CommandUuid  string
}

type CountOutstandingIDWorkflowStepCommandsRow struct {
	Count  int64
	StepID int64
}

func (q *Queries) CountOutstandingIDWorkflowStepCommands(ctx context.Context, arg CountOutstandingIDWorkflowStepCommandsParams) (CountOutstandingIDWorkflowStepCommandsRow, error) {
	row := q.db.QueryRowContext(ctx, countOutstandingIDWorkflowStepCommands, arg.EnrollmentID, arg.CommandUuid)
	var i CountOutstandingIDWorkflowStepCommandsRow
	err := row.Scan(&i.Count, &i.StepID)
	return i, err
}

const createIDCommand = `-- name: CreateIDCommand :exec
INSERT INTO id_commands
  (enrollment_id, command_uuid, step_id, request_type, last_push)
VALUES
  (?, ?, ?, ?, ?)
`

type CreateIDCommandParams struct {
	EnrollmentID string
	CommandUuid  string
	StepID       int64
	RequestType  string
	LastPush     sql.NullTime
}

func (q *Queries) CreateIDCommand(ctx context.Context, arg CreateIDCommandParams) error {
	_, err := q.db.ExecContext(ctx, createIDCommand,
		arg.EnrollmentID,
		arg.CommandUuid,
		arg.StepID,
		arg.RequestType,
		arg.LastPush,
	)
	return err
}

const createStep = `-- name: CreateStep :execlastid
INSERT INTO steps
  (workflow_name, instance_id, step_name, context, not_until, timeout)
VALUES
  (?, ?, ?, ?, ?, ?)
`

type CreateStepParams struct {
	WorkflowName string
	InstanceID   string
	StepName     sql.NullString
	Context      []byte
	NotUntil     sql.NullTime
	Timeout      sql.NullTime
}

func (q *Queries) CreateStep(ctx context.Context, arg CreateStepParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createStep,
		arg.WorkflowName,
		arg.InstanceID,
		arg.StepName,
		arg.Context,
		arg.NotUntil,
		arg.Timeout,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createStepCommand = `-- name: CreateStepCommand :exec
INSERT INTO step_commands
  (step_id, command_uuid, request_type, command)
VALUES
  (?, ?, ?, ?)
`

type CreateStepCommandParams struct {
	StepID      int64
	CommandUuid string
	RequestType string
	Command     []byte
}

func (q *Queries) CreateStepCommand(ctx context.Context, arg CreateStepCommandParams) error {
	_, err := q.db.ExecContext(ctx, createStepCommand,
		arg.StepID,
		arg.CommandUuid,
		arg.RequestType,
		arg.Command,
	)
	return err
}

const deleteIDCommandByWorkflow = `-- name: DeleteIDCommandByWorkflow :exec
DELETE
  c
FROM
  id_commands c
  INNER JOIN steps s
    ON c.step_id = s.id
WHERE
  c.enrollment_id = ? AND
  s.workflow_name = ?
`

type DeleteIDCommandByWorkflowParams struct {
	EnrollmentID string
	WorkflowName string
}

func (q *Queries) DeleteIDCommandByWorkflow(ctx context.Context, arg DeleteIDCommandByWorkflowParams) error {
	_, err := q.db.ExecContext(ctx, deleteIDCommandByWorkflow, arg.EnrollmentID, arg.WorkflowName)
	return err
}

const deleteIDCommands = `-- name: DeleteIDCommands :exec
DELETE FROM
  id_commands
WHERE
  enrollment_id = ?
`

func (q *Queries) DeleteIDCommands(ctx context.Context, enrollmentID string) error {
	_, err := q.db.ExecContext(ctx, deleteIDCommands, enrollmentID)
	return err
}

const deleteUnusedStepCommands = `-- name: DeleteUnusedStepCommands :exec
DELETE
  sc
FROM
  step_commands sc
  LEFT JOIN id_commands c
    ON sc.command_uuid = c.command_uuid
WHERE
  c.command_uuid IS NULL
`

func (q *Queries) DeleteUnusedStepCommands(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUnusedStepCommands)
	return err
}

const deleteWorkflowStepHavingNoCommands = `-- name: DeleteWorkflowStepHavingNoCommands :exec
DELETE
  s
FROM
  steps s
  LEFT JOIN id_commands c
    ON s.id = c.step_id
WHERE
  c.step_id IS NULL
`

func (q *Queries) DeleteWorkflowStepHavingNoCommands(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteWorkflowStepHavingNoCommands)
	return err
}

const deleteWorkflowStepHavingNoCommandsByWorkflowName = `-- name: DeleteWorkflowStepHavingNoCommandsByWorkflowName :exec
DELETE
  s
FROM
  steps s
  LEFT JOIN id_commands c
    ON s.id = c.step_id
WHERE
  c.step_id IS NULL AND
  s.workflow_name = ?
`

func (q *Queries) DeleteWorkflowStepHavingNoCommandsByWorkflowName(ctx context.Context, workflowName string) error {
	_, err := q.db.ExecContext(ctx, deleteWorkflowStepHavingNoCommandsByWorkflowName, workflowName)
	return err
}

const getIDCommandsByStepID = `-- name: GetIDCommandsByStepID :many
SELECT
  command_uuid,
  request_type,
  result
FROM
  id_commands
WHERE
  enrollment_id = ? AND
  step_id = ? AND
  completed != 0
`

type GetIDCommandsByStepIDParams struct {
	EnrollmentID string
	StepID       int64
}

type GetIDCommandsByStepIDRow struct {
	CommandUuid string
	RequestType string
	Result      []byte
}

func (q *Queries) GetIDCommandsByStepID(ctx context.Context, arg GetIDCommandsByStepIDParams) ([]GetIDCommandsByStepIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getIDCommandsByStepID, arg.EnrollmentID, arg.StepID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIDCommandsByStepIDRow
	for rows.Next() {
		var i GetIDCommandsByStepIDRow
		if err := rows.Scan(&i.CommandUuid, &i.RequestType, &i.Result); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutstandingIDs = `-- name: GetOutstandingIDs :many
SELECT DISTINCT
  c.enrollment_id
FROM
  id_commands c
  JOIN steps s
    ON s.id = c.step_id
WHERE
  c.enrollment_id IN (/*SLICE:ids*/?) AND
  c.completed = 0 AND
  s.workflow_name = ?
`

type GetOutstandingIDsParams struct {
	Ids          []string
	WorkflowName string
}

func (q *Queries) GetOutstandingIDs(ctx context.Context, arg GetOutstandingIDsParams) ([]string, error) {
	query := getOutstandingIDs
	var queryParams []interface{}
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	queryParams = append(queryParams, arg.WorkflowName)
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var enrollment_id string
		if err := rows.Scan(&enrollment_id); err != nil {
			return nil, err
		}
		items = append(items, enrollment_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRequestType = `-- name: GetRequestType :one
SELECT
  request_type
FROM
  id_commands
WHERE
  enrollment_id = ? AND
  command_uuid = ?
`

type GetRequestTypeParams struct {
	EnrollmentID string
	CommandUuid  string
}

func (q *Queries) GetRequestType(ctx context.Context, arg GetRequestTypeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getRequestType, arg.EnrollmentID, arg.CommandUuid)
	var request_type string
	err := row.Scan(&request_type)
	return request_type, err
}

const getStepByID = `-- name: GetStepByID :one
SELECT
  workflow_name,
  instance_id,
  step_name,
  context
FROM
  steps
WHERE
  id = ?
`

type GetStepByIDRow struct {
	WorkflowName string
	InstanceID   string
	StepName     sql.NullString
	Context      []byte
}

func (q *Queries) GetStepByID(ctx context.Context, id int64) (GetStepByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStepByID, id)
	var i GetStepByIDRow
	err := row.Scan(
		&i.WorkflowName,
		&i.InstanceID,
		&i.StepName,
		&i.Context,
	)
	return i, err
}

const getWorkflowLastStarted = `-- name: GetWorkflowLastStarted :one
SELECT
  last_created_at
FROM
  wf_status
WHERE
  enrollment_id = ? AND
  workflow_name = ?
`

type GetWorkflowLastStartedParams struct {
	EnrollmentID string
	WorkflowName string
}

func (q *Queries) GetWorkflowLastStarted(ctx context.Context, arg GetWorkflowLastStartedParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getWorkflowLastStarted, arg.EnrollmentID, arg.WorkflowName)
	var last_created_at string
	err := row.Scan(&last_created_at)
	return last_created_at, err
}

const removeIDCommandsByStepID = `-- name: RemoveIDCommandsByStepID :exec
DELETE FROM
  id_commands
WHERE
  enrollment_id = ? AND
  step_id = ?
`

type RemoveIDCommandsByStepIDParams struct {
	EnrollmentID string
	StepID       int64
}

func (q *Queries) RemoveIDCommandsByStepID(ctx context.Context, arg RemoveIDCommandsByStepIDParams) error {
	_, err := q.db.ExecContext(ctx, removeIDCommandsByStepID, arg.EnrollmentID, arg.StepID)
	return err
}

const updateIDCommand = `-- name: UpdateIDCommand :exec
UPDATE
  id_commands
SET
  completed = ?,
  result = ?
WHERE
  enrollment_id = ? AND
  command_uuid = ?
LIMIT 1
`

type UpdateIDCommandParams struct {
	Completed    bool
	Result       []byte
	EnrollmentID string
	CommandUuid  string
}

func (q *Queries) UpdateIDCommand(ctx context.Context, arg UpdateIDCommandParams) error {
	_, err := q.db.ExecContext(ctx, updateIDCommand,
		arg.Completed,
		arg.Result,
		arg.EnrollmentID,
		arg.CommandUuid,
	)
	return err
}

const updateIDCommandTimestamp = `-- name: UpdateIDCommandTimestamp :exec
UPDATE
  id_commands
SET
  updated_at = CURRENT_TIMESTAMP
WHERE
  enrollment_id = ? AND
  command_uuid = ?
LIMIT 1
`

type UpdateIDCommandTimestampParams struct {
	EnrollmentID string
	CommandUuid  string
}

func (q *Queries) UpdateIDCommandTimestamp(ctx context.Context, arg UpdateIDCommandTimestampParams) error {
	_, err := q.db.ExecContext(ctx, updateIDCommandTimestamp, arg.EnrollmentID, arg.CommandUuid)
	return err
}
